@page "/fetchdata"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@using MudBlazor;

<h1>Call web API from a Blazor Server Razor component</h1>


    <MudInput Required="true"RequiredError="Birthday Date Required." T="string" @bind-Value="tarih"/>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="test">See your Sky</MudButton>
 

@if (getBranchesError)
{
    <p>Unable to get branches from GitHub. Please try again later.</p>
}
else
{
    <ul>
      
        
            <li>@branches.Aciklama</li>
            <li>@branches.Date</li>
            <li><MudImage Src="@branches.link"/></li>
        
    </ul>
}

@code {
    private GitHubBranch branches = new GitHubBranch();
    private bool getBranchesError;
    private bool shouldRender;
    [Parameter]
    public string tarih { get; set; }
    protected override bool ShouldRender() => shouldRender;

    public async void test()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://api.nasa.gov/planetary/apod?date="+tarih+"&api_key=z7k6C5dqWmsXJgvtmBcck4gSVl9YmfCYguAg3Sqv");
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            branches = await JsonSerializer.DeserializeAsync
               <GitHubBranch>(responseStream);
        }
        else
        {
            getBranchesError = true;
        }

        shouldRender = true;
        StateHasChanged();
    }

    public class GitHubBranch
    {
        [JsonPropertyName("explanation")]
        public string Aciklama { get; set; }
        [JsonPropertyName("date")]
        public DateTime Date { get; set; }
        [JsonPropertyName("url")]
        public string link { get; set; }
    }
}