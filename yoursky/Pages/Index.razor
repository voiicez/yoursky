@page "/"

@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@using MudBlazor;
@using System.Globalization;
@using MudBlazor.Internal;
@using Blazorise;
@inject IJSRuntime JS
@inject ISnackbar SB


<div class="d-flex flex-column">



    <obje>
        <h1>See Your Sky</h1>
        <b>
            NASA publishes "Astronomy Picture of the Day" since June 16, 1995. Thanks to me, you can write any date and see the picture of that day!
        </b>
    </obje>

    <InputMask Placeholder="YYYY-MM-DD" Plaintext="false" Autofocus="true" Style="width:150px" Class="rounded-pill mt-6" Alias="datetime" InputFormat="yyyy-mm-dd" @bind-Value="tarih" />
    @if (isLoading == false)
    {
        <MudButton Class="align-self-center rounded-pill mt-6" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="test">LET'S SEE!</MudButton>}
    else
    {
        <MudProgressCircular Class="mt-6" Color="MudBlazor.Color.Success" Indeterminate="true" />
    }

   
    <MudCard @onclick="FlipCard" Class="flip-card mt-6" Clicked="@(() => FlipCard())">
        
            @if (!IsFlipped)
            {

                <MudImage Fluid="true" MaxWidth="600" MaxHeight="720" Class="align-self-center justify-self-center mt-6 front-image" Src="@branches.link" />
            }
            else
            {
        <MudText Align="Align.Center" Class="back-image bson" Style="max-width:400px; font-family:'MyFont2';color:black">@branches.Aciklama</MudText>
            }
       
    </MudCard>
    


</div>
<bson class="d-flex">all the context after you press the button is covered by NASA.</bson>
<a href="https://twitter.com/behlulcansahin"><bsons class="d-flex">Behlül Sahin</bsons></a>






@code {
    private GitHubBranch branches = new GitHubBranch();
    private bool getBranchesError;
    private bool shouldRender;
    private string tarih;
    private int count = 0;
    protected override bool ShouldRender() => shouldRender;
    public bool isLoading = false;
    public bool btnctrl = false;
    public bool IsFlipped { get; set; } = false;

    public void FlipCard()
    {
        IsFlipped = !IsFlipped;
    }

    public async void test()
    {
        IsFlipped = false;
        isLoading = true;
        StateHasChanged();

        var request = new HttpRequestMessage(HttpMethod.Get,
    "https://api.nasa.gov/planetary/apod?date=" + tarih + "&api_key=z7k6C5dqWmsXJgvtmBcck4gSVl9YmfCYguAg3Sqv");
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);


        if (response.IsSuccessStatusCode)
        {


            using var responseStream = await response.Content.ReadAsStreamAsync();
            branches = await JsonSerializer.DeserializeAsync
               <GitHubBranch>(responseStream);
            isLoading = false;
        }
        else
        {
            getBranchesError = true;
            SB.Add("Please make sure you used the right format of date.(YYYY/MM/DD). " +
                "If it is okay, there could be a problem with our servers. " +
                "Also note that this service made in June 16, 1995. So there will be no content before that day.", Severity.Error, c =>
                {
                    c.Icon = Icons.Rounded.Error;
                }
                );
        }

        shouldRender = true;

        StateHasChanged();


    }


    public class GitHubBranch
    {
        [JsonPropertyName("explanation")]
        public string Aciklama { get; set; }
        [JsonPropertyName("date")]
        public string Date { get; set; }
        [JsonPropertyName("hdurl")]
        public string link { get; set; }

    }
}
