@page "/"

@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@using MudBlazor;
@using System.Globalization;
@using MudBlazor.Internal;
@using Blazorise;
@using System.Timers;
@using System.Net.Http;
@inject IJSRuntime JS
@inject ISnackbar SB


<div class="d-flex flex-column">



    <obje>
        <h1>See Your Sky</h1>
        <b>
            NASA publishes "Astronomy Picture of the Day" since June 16, 1995. Thanks to me, you can write any date and see the picture of that day!
        </b>
    </obje>

    <InputMask Placeholder="YYYY-MM-DD" Plaintext="false" Autofocus="true" Style="width:150px" Class="rounded-pill mt-6" Alias="datetime" InputFormat="yyyy-mm-dd" @bind-Value="tarih" />
    @if (isLoading == false)
    {
        <MudButton Class="align-self-center rounded-pill mt-6" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="test">LET'S SEE!</MudButton>}
    else
    {
        <MudProgressCircular Class="mt-6" Color="MudBlazor.Color.Success" Indeterminate="true" />
    }


    <MudCard @onclick="FlipCard" Class="flip-card mt-6" Clicked="@(() => FlipCard())">

        @if (!IsFlipped)
        {

            <MudImage Fluid="true" MaxWidth="600" MaxHeight="720" Class="align-self-center justify-self-center mt-6 front-image" Src="@branches.link" />
        }
        else
        {
            <MudText Align="Align.Center" Class="back-image bson" Style="max-width:400px; font-family:'MyFont2';color:black">@branches.Aciklama</MudText>
        }

    </MudCard>



</div>



<p>Unique Visitors Today: @deneme</p>


<bson class="d-flex">all the context after you press the button is covered by NASA.</bson>
<a href="https://twitter.com/behlulcansahin"><bsons class="d-flex">Behlül Sahin</bsons></a>






@code {
    private GitHubBranch branches = new GitHubBranch();
    private bool getBranchesError;
    private bool shouldRender;
    private string tarih;
    private int count = 0;
    protected override bool ShouldRender() => shouldRender;
    public bool isLoading = false;
    public bool btnctrl = false;
    public bool IsFlipped { get; set; } = false;

    public void FlipCard()
    {
        IsFlipped = !IsFlipped;
    }

    public async void test()
    {
        IsFlipped = false;
        isLoading = true;
        StateHasChanged();

        var request = new HttpRequestMessage(HttpMethod.Get,
    "https://api.nasa.gov/planetary/apod?date=" + tarih + "&api_key=z7k6C5dqWmsXJgvtmBcck4gSVl9YmfCYguAg3Sqv");
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);


        if (response.IsSuccessStatusCode)
        {


            using var responseStream = await response.Content.ReadAsStreamAsync();
            branches = await JsonSerializer.DeserializeAsync
               <GitHubBranch>(responseStream);
            isLoading = false;
        }
        else
        {
            getBranchesError = true;
            SB.Add("Please make sure you used the right format of date.(YYYY/MM/DD). " +
                "If it is okay, there could be a problem with our servers. " +
                "Also note that this service made in June 16, 1995. So there will be no content before that day.", Severity.Error, c =>
                {
                    c.Icon = Icons.Rounded.Error;
                }
                );
        }

        shouldRender = true;

        StateHasChanged();


    }


    public class GitHubBranch
    {
        [JsonPropertyName("explanation")]
        public string Aciklama { get; set; }
        [JsonPropertyName("date")]
        public string Date { get; set; }
        [JsonPropertyName("hdurl")]
        public string link { get; set; }

    }

    private class CloudflareApiResponse
    {
        public Data data { get; set; }
        public object[] errors { get; set; }
    }

    private class Data
    {
        public Viewer viewer { get; set; }
    }

    private class Viewer
    {
        public Zone[] zones { get; set; }
    }

    private class Zone
    {
        public HttpRequests1dGroup[] httpRequests1dGroups { get; set; }
    }

    private class HttpRequests1dGroup
    {
        public Dimensions dimensions { get; set; }
        public Uniq uniq { get; set; }
    }

    private class Dimensions
    {
        public string date { get; set; }
    }

    private class Uniq
    {
        public int uniques { get; set; }
    }

    private HttpRequests1dGroup result { get; set; }

    [Inject]
    private HttpClient httpClient { get; set; }

    private async Task FetchCloudflareData()
    {
        string CURRENT_DATE = DateTime.Today.ToString("yyyy-MM-dd");
        string CLOUDFLARE_API_KEY = "YCazWqOxD4ag4jdQN5G9HbuieD5xy1WCRajDA04w";
        string ZONE_TAG = "b27ad301ae8e14b2006b6063720524ee";

        string GRAPHQL_QUERY = "{\"query\": \"{" +
                                "viewer {" +
                                "zones(filter: { zoneTag: \\\"" + ZONE_TAG + "\\\" }) {" +
                                "httpRequests1dGroups(" +
                                "filter: { date: \\\"" + CURRENT_DATE + "\\\" }" + // Use CURRENT_DATE to fetch data for the current day
                                "limit: 1000" +
                                ") {" +
                                "dimensions {" +
                                "date" +
                                "}" +
                                "uniq {" +
                                "uniques" +
                                "}" +
                                "}" +
                                "}" +
                                "}" +
                                "}\"}";

        using (var request = new HttpRequestMessage(HttpMethod.Post, "https://api.cloudflare.com/client/v4/graphql/"))
        {
            request.Headers.Add("Authorization", $"Bearer {CLOUDFLARE_API_KEY}");
            request.Content = new StringContent(GRAPHQL_QUERY, System.Text.Encoding.UTF8, "application/json");

            using (var response = await httpClient.SendAsync(request))
            {
                if (response.IsSuccessStatusCode)
                {
                    string jsonResponse = await response.Content.ReadAsStringAsync();
                    Console.WriteLine("JSON Response: " + jsonResponse); // Log the JSON response for debugging purposes

                    var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    };

                    var cloudflareResponse = JsonSerializer.Deserialize<CloudflareApiResponse>(jsonResponse, options);
                    try
                    {
                        // Your existing code to fetch data from Cloudflare API ...

                        if (cloudflareResponse?.data?.viewer?.zones?.Length > 0)
                        {
                            result = cloudflareResponse.data.viewer.zones[0]?.httpRequests1dGroups[0];
                            deneme = result.uniq.uniques;
                            shouldRender = true;
                            StateHasChanged();

                            Console.WriteLine("Result.dimensions.uniq Log: " + result?.uniq?.uniques);
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine("Error fetching Cloudflare data: " + ex.Message);
                    }
                }
                else
                {
                    Console.WriteLine($"API request failed with status code: {response.StatusCode}");
                }
            }
        }
    }


    public int deneme { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await FetchCloudflareData();

        StartTimer();

    }
    private Timer timer;

  

    private void StartTimer()
    {
        // Create a timer that triggers every 10 minutes (600,000 milliseconds)
        timer = new Timer(300000);
        timer.Elapsed += OnTimerElapsed;
        timer.AutoReset = true; // Set to true to make it fire continuously
        timer.Start();
    }

    private async void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        // Use InvokeAsync to switch execution to the appropriate context
        // when triggering rendering or updating component state.
        await InvokeAsync(async () =>
        {
            await FetchCloudflareData();
            Console.WriteLine("test");
            StateHasChanged();
        });
    }






}
